name: gemini

on:
  workflow_dispatch: {}
  issues:
    types: [labeled]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: read

concurrency:
  group: gemini-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: false

jobs:
  draft-pr:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'ai-task') ||
      (github.event_name == 'issue_comment' && github.event.action == 'created' && contains(github.event.comment.body, '@gemini-cli'))
    runs-on: ubuntu-latest
    environment: preview

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install gemini-cli
        run: npm i -g @google/gemini-cli@latest

      - name: Prepare scoped settings (runner only)
        run: |
          mkdir -p .gemini
          cat > .gemini/settings.json <<'JSON'
          {
            "tools": {
              "allowed": ["read_file","write_file","replace","glob","search_file_content","web_fetch"],
              "blocked": ["run_shell_command"]
            },
            "workspace": { "includeDirectories": ["backend","frontend","tests","backend/tests"] }
          }
          JSON

      - name: Collect task from Issue/Comment
        id: prep
        uses: actions/github-script@v7
        with:
          script: |
            const ev = context.payload;
            let source = 'manual';
            let task = '';
            let num = context.runId;
            let base = ev?.repository?.default_branch || 'main';

            if (context.eventName === 'issues' && ev.action === 'labeled' && ev.label?.name === 'ai-task') {
              source = `issue #${ev.issue.number}`;
              num = ev.issue.number;
              task = `Title: ${ev.issue.title}\n\n${ev.issue.body || ''}`;
            } else if (context.eventName === 'issue_comment' && ev.action === 'created' && ev.comment?.body?.includes('@gemini-cli')) {
              source = (ev.issue?.pull_request ? `pr #${ev.issue.number}` : `issue #${ev.issue.number}`);
              num = ev.issue?.number || context.runId;
              task = (ev.comment.body || '').replace(/@gemini-cli/g, '').trim();
            } else {
              task = 'No task provided (workflow_dispatch).';
            }

            core.setOutput('source', source);
            core.setOutput('task', task);
            core.setOutput('branch', `ai/gemini/${num}`);
            core.setOutput('base', base);

      - name: Write AI summary & prompt
        run: |
          echo "### AI Task from ${{ steps.prep.outputs.source }}" > AI_SUMMARY.md
          printf '\n%s\n' "${{ steps.prep.outputs.task }}" >> AI_SUMMARY.md

          cat > PROMPT.txt <<'EOS'
          You are a repository code editor running on CI.
          Apply the following task to this repo with minimal and safe edits.

          === Task ===
          EOS
          printf '%s\n' "${{ steps.prep.outputs.task }}" >> PROMPT.txt
          cat >> PROMPT.txt <<'EOS'

          === Constraints ===
          - Only modify files under backend/, frontend/, tests/, or backend/tests/.
          - Do not create or change files outside these paths.
          - Keep changes minimal and self-contained.
          - Ensure code compiles and tests can run.
          - After edits, append a concise "### Changes" bullet list to AI_SUMMARY.md (do not overwrite existing text).

          Return only code edits using built-in file tools.
          EOS

      - name: Run gemini (edit only backend/frontend/tests/backend/tests)
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          gemini --include-directories backend,frontend,tests,backend/tests \
            --approval-mode=auto_edit \
            --allowed-tools write_file,replace,read_file,glob \
            -m gemini-1.5-flash \
            "$(cat PROMPT.txt)"

      - name: Detect eligible paths
        id: paths
        run: |
          set -e
          paths=""
          for p in backend frontend tests backend/tests; do
            if [ -e "$p" ]; then
              paths="$paths $p"
            fi
          done
          if [ -f AI_SUMMARY.md ]; then
            paths="$paths AI_SUMMARY.md"
          fi
          paths="$(echo "$paths" | xargs || true)"
          echo "paths=$paths" >> "$GITHUB_OUTPUT"
          echo "Detected paths: $paths"

      - name: Commit changes (limit paths; include untracked; tolerate missing dirs)
        id: changes
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          paths="${{ steps.paths.outputs.paths }}"

          if [ -z "$paths" ]; then
            echo "No eligible paths present."
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git add -N -- $paths || true

          if [ -z "$(git status --porcelain -- $paths)" ]; then
            echo "No changes produced by gemini."
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git add -- $paths
          git commit -m "chore(ai): apply gemini task from ${{ steps.prep.outputs.source }}"
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: Create draft PR
        if: steps.changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          title: "chore(ai): draft from ${{ steps.prep.outputs.source }}"
          body: |
            Generated by gemini-cli on CI.

            - Source: ${{ steps.prep.outputs.source }}
            - Scope: backend/, frontend/, tests/, backend/tests/
            - Summary: See AI_SUMMARY.md
          commit-message: "chore(ai): apply gemini task from ${{ steps.prep.outputs.source }}"
          branch: ${{ steps.prep.outputs.branch }}
          base: ${{ steps.prep.outputs.base }}
          draft: true
          labels: ai-generated
          token: ${{ secrets.GITHUB_TOKEN }}
