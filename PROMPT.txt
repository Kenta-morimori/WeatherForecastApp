You are a repository code editor running on CI.
Apply the following task to this repo with minimal and safe edits.

=== Task ===
Title: [gemini-cliテスト] コード全体の冗長箇所チェックと最小リファクタ

## Goal
- リポジトリ全体（backend/frontend/tests）に対して、冗長・重複・死蔵コード・同値処理の乱立・同一ハードコード値の散在などを検出し、**安全な最小限のリファクタ**で改善する。
- 変更は既存挙動を保持（ノンブレイキング）。危険度が中〜高の箇所は **提案のみ**（AI_SUMMARY.md）にとどめる。

## Scope
- 対象ディレクトリ: , ,
- それ以外（CI, infra, .github配下, package管理, lockファイル 等）は変更しない。

## Must / Constraints
- **最小変更**：大規模改変・全面リライト・一括フォーマット不可（差分ノイズを避ける）。
- **API/挙動互換**：外部公開の関数・エンドポイントは互換維持。
- **依存追加禁止**：新規ライブラリは入れない。
- **安全ガード**：ファイルごとの変更は小さめ（例：1ファイルあたり±60行以内 / 合計6ファイル以内を目安）。
- **記号注意**：プロンプト解釈回避のため、デコレータの  は文中で **at-sign** と表記（コード中はOK）。
- 変更後は **AI_SUMMARY.md** に  を追記（Before/After の要点・影響範囲・リスク・除外した提案を列挙）。

## What to do (優先順)
1) 検出レポート（AI_SUMMARY.md に追記）
   - Top 5〜10件の冗長候補を  と短い根拠で列挙（重複関数/類似処理/コピペ/魔法値の散在/未使用import・未使用関数など）。
   - 各項目に **推定メリット（行数削減/可読性/保守性）** と **リスク（動作影響/型・UI/外部I/F）** を付記。
2) **低リスクの機械的リファクタのみ適用**
   - 例：未使用import・未使用変数の削除 / 定数の共通化 / 極小の重複関数の統合 / 同一パターンの util 化（小規模） / 似た zod/Pydantic スキーマのマージ（完全同値のみ） / 既存のエラーハンドリング方針への揃え など。
3) 中〜高リスクは **提案のみ**（適用しない）
   - なぜ今回は適用しないか（依存が多い・UI影響・テスト不足など）を  に明記。

## Out of scope（やらないこと）
- UI/UX仕様変更、設計思想の転換、ルーティングやAPI設計の大幅変更
- 依存追加/削除、CIやSecretsの編集、リポジトリ設定の変更
- 大規模フォーマット/命名一括変更/ディレクトリ大移動

## Acceptance Criteria
- Draft PR が自動生成される。
- 変更ファイルは , , ,  のみ。
- AI_SUMMARY.md に検出リストと実施/保留の区別が明確に記載されている。
- 変更は最小で、ビルド/既存テストに影響しないこと（CIがあれば落ちないこと）。


=== Constraints ===
- Only modify files under backend/, frontend/, tests/, or backend/tests/.
- Do not create or change files outside these paths.
- Keep changes minimal and self-contained.
- Ensure code compiles and tests can run.
- After edits, append a concise "### Changes" bullet list to AI_SUMMARY.md (do not overwrite existing text).

Return only code edits using built-in file tools.
